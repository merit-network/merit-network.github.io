<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Merit Network, Inc. Open Source and Technology RSS Feed]]></title><description><![CDATA[Open source and technology from Merit Network, Inc.]]></description><link>https://merit-network.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 26 Apr 2022 14:42:01 GMT</lastBuildDate><item><title><![CDATA[Gathering Business Analysis Requirement]]></title><description><![CDATA[If you‚Äôre looking for guidance on how to start gathering requirements for a project, look no further! This quick to-do list/help guide can‚Ä¶]]></description><link>https://merit-network.github.io/gathering-ba-requirements/</link><guid isPermaLink="false">https://merit-network.github.io/gathering-ba-requirements/</guid><pubDate>Mon, 21 Mar 2022 21:19:58 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;If you‚Äôre looking for guidance on how to start gathering requirements for a project, look no further! This quick to-do list/help guide can assist you in your Business Analyst journey ‚Äì no matter how your company functions or the status of your project.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;If you‚Äôre unsure of where to start gathering requirements for a project, start with the ‚Äòwhat,‚Äô ‚Äòwhy,‚Äô and ‚Äòhow.‚Äô Be sure to ask a lot of questions to project managers, developers, and other stake holders. Confirm your understandings with everyone involved, write out requirements in whatever form your company prefers, and pass off the project to your developers!&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Over my career, I‚Äôve learned a thing or two about working with project managers, developers, stakeholders, scope creep-ers, User Experience (UX) designers, Quality Assurance (QA) engineers, etc. While every place seems to treat business analysis a little different, there are steps you can take to know you‚Äôre handing off a fully defined project to your developers. While this is certainly not the source of truth, it can help provide some guidance when you‚Äôre unsure where to start or where to go next.&lt;/p&gt;
&lt;h2&gt;Define the Project&lt;/h2&gt;
&lt;p&gt;You‚Äôre here if you‚Äôve been assigned a new project (WOOHOO)! Regardless of whether this project is big or small, it needs to be defined. What does this mean, exactly? Well, you could be asked ‚ÄúMake this screen better.‚Äù That doesn‚Äôt really help, does it? A Business Analyst needs to know the what, why, and how before they can get going on a project.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;What&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Most simply, &lt;strong&gt;what&lt;/strong&gt; is the end goal of this project?&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;There can be a lot of noise happening when enhancements are requested ‚Äì something to remember is the &lt;strong&gt;why&lt;/strong&gt;. If this is going to take 2 weeks of development, and help only one person save one click ‚Äì that doesn‚Äôt seem necessary.
Make sure you are discussing the ‚Äòwhy‚Äô with managers and developers to fully understand the impact and work associated with a project.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This is &lt;strong&gt;how&lt;/strong&gt; you reach the end goal ‚Äì the ‚Äúhow you make this screen function better.‚Äù This will take some back and forth with managers and stakeholders to ensure the project is performing the ‚Äòhow‚Äô in a way that makes the most sense - based off of available resources and the established end goal.&lt;/p&gt;
&lt;h2&gt;Establish Your Contacts&lt;/h2&gt;
&lt;p&gt;This is to help you! Work with your project managers to understand who you will be reaching out to for any questions, discuss gaps in the project, provide updates to, etc.&lt;/p&gt;
&lt;h2&gt;Establish knowns/unknowns&lt;/h2&gt;
&lt;p&gt;This comes back to defining the project: Once you have an understanding of the end goal, you‚Äôll want to define what you know about the project and what is still ambiguous. Review any current documentation in depth with your project managers, stakeholders, developers, and (if possible) any UX designers.&lt;/p&gt;
&lt;h2&gt;Write out Requirements&lt;/h2&gt;
&lt;p&gt;After you have defined the project, hashed out any unknowns, and established your contacts, write out your requirements in whatever form your company uses. As you go through the document, you may find you have more questions and need to go back to your contacts. This is something you may also want to write as you go down your list. There is no ‚Äúone way‚Äù to do things, so find whatever method works best for you!&lt;/p&gt;
&lt;p&gt;This is also where - if it‚Äôs part of your department‚Äôs process - you would write out any user stories. These could be in the form of tickets, or in an Excel file that‚Äôs passed off to a story writer, or your project manager, developer, etc. Depending on your release structure, these could be broken out in a number of ways. If you have short sprint cycles, then your user stories would need to be pretty small ‚Äì IE development hours would need to make sense. If you have longer sprint cycles, then you can make the stories a little more robust.&lt;/p&gt;
&lt;h2&gt;Discuss with Stakeholders and Developers&lt;/h2&gt;
&lt;p&gt;Before passing off your requirements and stories, go back to your stakeholders one last time to discuss what you have gathered. It‚Äôs possible they‚Äôve thought of something new, or a piece was lost in translation, or they‚Äôve changed their mind entirely (hopefully this is not the case). This is the last chance for any ‚Äòscope creepers‚Äô to expose themselves and add on any additional requirements, or establish what the first enhancement will be. This is also where a developer might ask that a user story be broken out into multiple stories, or could even ask for some to be combined. Add any additional information to the stories/requirements as needed to ensure the final product is what everyone has discussed.&lt;/p&gt;
&lt;p&gt;Be sure to get the ‚Äúgo ahead‚Äù from everyone involved so you know you‚Äôve covered all your bases. There should (hopefully) be no surprised faces from stakeholders when the project goes live. Document this approval to proceed and by whom to support your potential stance against scope creepers.&lt;/p&gt;
&lt;h2&gt;Pass Off the Project&lt;/h2&gt;
&lt;p&gt;At this point, the project goes to whoever will be working on it! You might get questions and the project might shift a little bit, but that can be handled as needed while working with your contacts. Document when it was passed off and to whom.&lt;/p&gt;
&lt;h2&gt;Things to remember as you go:&lt;/h2&gt;
&lt;h4&gt;&lt;strong&gt;ASK QUESTIONS!&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Do not forget to ask questions! Mention any concerns you may have, don‚Äôt be afraid to be annoying, na√Øve, or persistent with the amount of question asking. You and any stakeholders will be happy to have hashed out any potential issues early on. Do what you need to do, ask that question.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;DOCUMENT EVERYTHING!&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Take as many thorough notes as you can along the way. Having in-depth notes to reference will be a life savior. Timestamps and approval documentation will save you during a crisis.&lt;/p&gt;
&lt;h1&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;It can be difficult to know where to start with a project. Keep these simple suggestions in mind as you go, and know that you can always ask questions. Although Business Analysis might look a little different depending on the company, there is always one common denominator ‚Äì Requirements need to be gathered to fully understand a project. Go forth, and gather those requirements!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Rollback Multiple Test Databases in Django with Pytest]]></title><description><![CDATA[UPDATE: 2021-05-10 The pytest-django team is actively working on resolving this issue! üéâ Nearly the same day we put this up they started‚Ä¶]]></description><link>https://merit-network.github.io/django-pytest-multi-database/</link><guid isPermaLink="false">https://merit-network.github.io/django-pytest-multi-database/</guid><pubDate>Mon, 05 Jul 2021 15:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;UPDATE: 2021-05-10&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The pytest-django team is actively working on resolving this issue!&lt;/strong&gt; üéâ Nearly the same day we put this up they started merging duplicate tickets and even have an initial PR!&lt;/p&gt;
&lt;p&gt;View/track progress at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issue: &lt;a href=&quot;https://github.com/pytest-dev/pytest-django/issues/924&quot;&gt;https://github.com/pytest-dev/pytest-django/issues/924&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a href=&quot;https://github.com/pytest-dev/pytest-django/pull/930&quot;&gt;https://github.com/pytest-dev/pytest-django/pull/930&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Until an official solution lands feel free to follow this article. Once there‚Äôs an official solution we would &lt;em&gt;strongly&lt;/em&gt; encourage using it!&lt;/p&gt;
&lt;h1&gt;What‚Äôs the problem?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;, &lt;a href=&quot;https://docs.pytest.org/&quot;&gt;pytest&lt;/a&gt;, and &lt;a href=&quot;https://pytest-django.readthedocs.io/en/latest/&quot;&gt;pytest-django&lt;/a&gt; are awesome and work very well together when you have a single database and/or use a single, temporary test database that is created and destroyed every test run.&lt;/p&gt;
&lt;p&gt;If you have multiple (test) databases that persist before/after test runs you may find that your test data remains for all databases that aren‚Äôt named ‚Äúdefault‚Äù.&lt;/p&gt;
&lt;p&gt;This can lead to all sorts of issues with tests and isn‚Äôt great when you have shared test databases.&lt;/p&gt;
&lt;h1&gt;pytest-django doesn‚Äôt support multi-db rollback&lt;/h1&gt;
&lt;p&gt;When setting up the database fixtures (&lt;code class=&quot;language-text&quot;&gt;db&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;transactional_db&lt;/code&gt;) pytest-django makes use of &lt;a href=&quot;https://docs.djangoproject.com/en/3.2/topics/testing/tools/#transactiontestcase&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.2/topics/testing/tools/#testcase&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;TestCase&lt;/code&gt;&lt;/a&gt;. Both of these use transactions under the hood and while they may also do things atomically the big difference is that one truncates all tables while the other resets state after each test.&lt;/p&gt;
&lt;p&gt;The challenge in using these with pytest-django is that &lt;code class=&quot;language-text&quot;&gt;TransactionTestCase&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;TestCase&lt;/code&gt; are hard-coded to only work with the default database via &lt;code class=&quot;language-text&quot;&gt;DEFAULT_DB_ALIAS&lt;/code&gt; (&lt;em&gt;see this at &lt;a href=&quot;https://github.com/django/django/blob/main/django/test/testcases.py#L927&quot;&gt;https://github.com/django/django/blob/main/django/test/testcases.py#L927&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Because of the hard-coded &lt;code class=&quot;language-text&quot;&gt;DEFAULT_DB_ALIAS&lt;/code&gt; any database that isn‚Äôt the default won‚Äôt have rollback and will persist any changes made during tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is less an issue with pytest-django and more an issue with hard-coded defaults in Django‚Äôs test classes.&lt;/strong&gt; Django expects you to provide the DB names for test cases as-needed in a multi-database test setup (&lt;em&gt;see &lt;a href=&quot;https://docs.djangoproject.com/en/3.2/topics/testing/tools/#testing-multi-db&quot;&gt;https://docs.djangoproject.com/en/3.2/topics/testing/tools/#testing-multi-db&lt;/a&gt;&lt;/em&gt;) but because we aren‚Äôt directly sub-classing test cases we can‚Äôt specify our databases.&lt;/p&gt;
&lt;h1&gt;Using pytest fixtures to patch Django‚Äôs test classes&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The fix for this is pretty simple!&lt;/strong&gt; We‚Äôre going to use a pytest fixture that‚Äôll patch Django‚Äôs test classes to support all databases defined in Django‚Äôs settings.&lt;/p&gt;
&lt;p&gt;Assuming you already have pytest and pytest-django setup and working this is all you need to add to your base &lt;code class=&quot;language-text&quot;&gt;conftest.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pytest


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;autouse&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scope&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;session&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;django_db_multiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;
    Ensure all test functions using Django test cases have
    multiple database rollback support.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; _pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;monkeypatch &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; MonkeyPatch
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;conf &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; settings
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;test &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; TestCase
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;test &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; TransactionTestCase

    db_keys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;settings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DATABASES&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    monkeypatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MonkeyPatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    monkeypatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TestCase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;databases&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; db_keys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    monkeypatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TransactionTestCase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;databases&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; db_keys&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; monkeypatch

    monkeypatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;undo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;All set!&lt;/strong&gt; You now have rollback support for all databases. You don‚Äôt need to do anything else and can get back to writing tests. Any changes you make in your tests will be rolled back across all of your databases.&lt;/p&gt;
&lt;p&gt;This works by replacing the hard-coded default &lt;code class=&quot;language-text&quot;&gt;DEFAULT_DB_ALIAS&lt;/code&gt; with the database names defined in your settings. Because it‚Äôs an &lt;code class=&quot;language-text&quot;&gt;autouse&lt;/code&gt;, session-scoped fixture in your base configuration it‚Äôll be run once automatically and persist for all tests.&lt;/p&gt;
&lt;h1&gt;Other solutions and discussions&lt;/h1&gt;
&lt;p&gt;There isn‚Äôt yet a consensus on how best to do this and there isn‚Äôt yet an official solution. What we‚Äôre using is based on comments and direction from contributors to pytest-django but there‚Äôs always more than one way to do things.&lt;/p&gt;
&lt;p&gt;For alternative solutions and more discussion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pytest-dev/pytest-django/issues/76&quot;&gt;https://github.com/pytest-dev/pytest-django/issues/76&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pytest-dev/pytest/issues/1872&quot;&gt;https://github.com/pytest-dev/pytest/issues/1872&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Arcade Pop-up for Nested Relationships and Duplicate Fields]]></title><description><![CDATA[Arcade is great at distilling information in your pop-ups, but complex schemas can pose a challenge and require some tinkering that goes a‚Ä¶]]></description><link>https://merit-network.github.io/arcade-nested-relationship/</link><guid isPermaLink="false">https://merit-network.github.io/arcade-nested-relationship/</guid><pubDate>Mon, 28 Jun 2021 10:50:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Arcade is great at distilling information in your pop-ups, but complex schemas can pose a challenge and require some tinkering that goes a bit beyond the documentation.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;If you have complex schema with nested relationships and duplicate rows that can not be accessed with an existing Arcade function, use multiple filter statements, loop through each resulting FeatureSet, store looped results in pop-up strings, and use a separate array to check and capture unique values.&lt;/p&gt;
&lt;h1&gt;Complications of consolidating a complex data structure with Arcade&lt;/h1&gt;
&lt;p&gt;Coming from a data science background where data frames provide the main means for wrangling your data, jumping into Arcade felt a bit like stumbling around in a dark cave. Figuring out how to display data from a related table is well documented - define your sql filter statement, use &lt;code class=&quot;language-text&quot;&gt;Filter()&lt;/code&gt;, and loop through the resulting FeatureSet to populate your pop-up string. But what if you need to take this resulting FeatureSet a step further and access data related to your related data? How would you then display only the unique fields? Addressing just one of these requirements may allow you to use helpful Arcade functions like &lt;code class=&quot;language-text&quot;&gt;Filter()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Distinct()&lt;/code&gt;, but trying to accommodate all requirements may move you beyond FeatureSets and therefore limits the Arcade functions at your disposal. &lt;strong&gt;Even if this is the case, Arcade can still be used as a low-code solution for your pop-ups.&lt;/strong&gt; Let‚Äôs look at a concrete example.&lt;/p&gt;
&lt;p&gt;I recently worked on a project with the following structure in an enterprise geodatabase with configured web services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one point feature class (&lt;code class=&quot;language-text&quot;&gt;splicecases&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;one line feature class (&lt;code class=&quot;language-text&quot;&gt;fibercable&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;one non-spatial table related to the line feature class (&lt;code class=&quot;language-text&quot;&gt;fibers&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;and one non-spatial table related to the point feature class (&lt;code class=&quot;language-text&quot;&gt;fibersplice&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In non-database terms, the four tables describe a splice case location and the details of the fiber splicing within the fiber cables (e.g. at splice case location A, cable A contains fibers 1-12 which are spliced to fibers 6 - 24 in cable Z). We needed a pop-up on the &lt;code class=&quot;language-text&quot;&gt;splicecases&lt;/code&gt; to summarize data from the point, two intersecting lines, and potentially hundreds of rows each in the two non-spatial tables.&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;code class=&quot;language-text&quot;&gt;fibersplice&lt;/code&gt; table has a row for each strand connection, showing the ‚ÄòA‚Äô fiber ID and the connected ‚ÄòZ‚Äô fiber ID. The actual owner information is housed in a separate &lt;code class=&quot;language-text&quot;&gt;fibers&lt;/code&gt; table, with one row per fiber strand. Combined, the data looks something like this snippet:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Owner A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Group A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Fiber # A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Owner Z&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Group Z&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Fiber # Z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Company A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1 - 12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Company B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6 - 24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Company A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1 - 12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Company B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6 - 24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Company A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1 - 12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Company B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6 - 24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Company A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1 - 12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Company B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6 - 24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, as there could be hundreds of rows for each location, we were looking for an output with one row per fiber-strand grouping, rather than individual rows for each individual strand:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Owner A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Group A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Owner Z&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Group Z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Company A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1 - 12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Company B&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6 - 24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This combination of requirements proved problematic for Arcade - no matter how you slice the expression, there is always a section left out of a standard, well-documented, solution. In one scenario you may be able to incorporate data from three tables and could use the &lt;code class=&quot;language-text&quot;&gt;Distinct()&lt;/code&gt; function to remove rows with duplicate &lt;code class=&quot;language-text&quot;&gt;field_groupings&lt;/code&gt;, but then could not access the &lt;code class=&quot;language-text&quot;&gt;owner&lt;/code&gt; field from the &lt;code class=&quot;language-text&quot;&gt;fibers&lt;/code&gt; table or know the difference between the A strand and Z strand. In another scenario, all data could be incorporated from the four tables, but then the &lt;code class=&quot;language-text&quot;&gt;Distinct()&lt;/code&gt; function was not able to be used.&lt;/p&gt;
&lt;p&gt;The data could have been moved to a hosted feature service for joins in ArcGIS Online, but then we would lose the necessary functionality of the enterprise geodatabase. Being in the enterprise geodatabase, we were not able to publish joined data or create joins in ArcGIS Online. &lt;strong&gt;The solution is a bit loopy, but it addresses all requirements.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Using nested loops for nested relationships&lt;/h1&gt;
&lt;p&gt;You start out similarly to how you would start most Arcade expressions looking to access related data:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Declare FeatureSet variables by map ID&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fibersplice &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FeatureSetById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  $map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* Gisprod.DBO.fibersplice */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;178f5255589-layer-5&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fibercable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FeatureSetById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* FIBERCABLE */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;178f5255582-layer-3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fibers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FeatureSetById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  $map&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* Gisprod.DBO.fiber */&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;178f5255590-layer-6&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Filter for splice case records associated with the splice case the user clicks&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs_segid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $feature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ipid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs_filterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;spliceclosureipid = @fs_segid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedFibersplice &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fibersplice&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fs_filterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to initialize our variables that are going to hold the various components of our final pop-up, as well as the variable that will hold our &lt;code class=&quot;language-text&quot;&gt;fiber_grouping&lt;/code&gt; as we iterate to check for unique occurrences:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; scPopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fromcablePopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tocablePopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; afPopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; zfPopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; uniqueGrouping &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now, the loops! I know, loops are not the most efficient, but with a limited list of functions to work with sometimes loops are your best option. We‚Äôre going to start by first looping through &lt;code class=&quot;language-text&quot;&gt;fibersplice&lt;/code&gt;. In each iteration of the loop, we grab unique IDs for our A and Z cables as well as our fibers in &lt;code class=&quot;language-text&quot;&gt;fibers&lt;/code&gt;.
These unique IDs are used to create additional filtered FeatureSets for our individual fiber strands and fiber cables (in both the A and Z directions).&lt;/p&gt;
&lt;p&gt;We‚Äôll use these filtered datasets to individually loop through and grab the field of interest for our pop-up. However, before we loop through each new filtered FeatureSet, we need to check if this is a unique row of data. We only want one entry per grouping, and luckily, this dataset contains a text field of the &lt;code class=&quot;language-text&quot;&gt;fiber_grouping&lt;/code&gt;. We‚Äôre going to grab this field, check if it‚Äôs already listed in our array we just initialized (&lt;code class=&quot;language-text&quot;&gt;uniqueGrouping&lt;/code&gt;), and if it‚Äôs not already listed we will proceed with the population of our pop-up string components and save the &lt;code class=&quot;language-text&quot;&gt;fiber_grouping&lt;/code&gt; in the list &lt;code class=&quot;language-text&quot;&gt;uniqueGrouping&lt;/code&gt; to skip over it the next time we come across this value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// For every fiber cable, filter and return the related fiber records&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedFibersplice&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Grab the unique IDs for the from cable, to cable, and all fiber strands&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// involved in the splice - we&apos;ll get the A and Z directions below&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fromCable_segid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asegmentidfkey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; toCable_segid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;zsegmentidfkey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fiber_signalipid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signalipid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Prepare the filter statements for each dataset we&apos;ll want to access&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fiber_filterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;signalipid = @fiber_signalipid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fiber_AfilterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;segmentidfkey = @fromCable_segid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fiber_ZfilterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;segmentidfkey = @toCable_segid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fromcable_filterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;segmentid = @fromCable_segid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tocable_filterStatement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;segmentid = @toCable_segid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Filter your data based on the above filter statements&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Note: relatedFibers are put in ascending order to speed up&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// the process of checking for repeat groupings.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedFibers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OrderBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fibers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fiber_filterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;fiber_grouping&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedAFibers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;relatedFibers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fiber_AfilterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedZFibers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;relatedFibers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fiber_ZfilterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedFromCable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fibercable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fromcable_filterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relatedToCable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fibercable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tocable_filterStatement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// First check if we have a unique row of data based on the fiber grouping field&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedAFibers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; checkGrouping &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fiber_grouping&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uniqueGrouping &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; checkGrouping&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Continue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Populate each individual component of the final pop-up string&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fc &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedFromCable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      fromcablePopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tc &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedToCable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      tocablePopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; af &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedAFibers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      afPopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; af&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;owner &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; af&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fiber_grouping&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      uniqueGrouping &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; af&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fiber_grouping&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; zf &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; relatedZFibers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      zfPopupResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; zf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;owner &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; zf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fiber_grouping &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; zf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;comment &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; ||&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Tie individual pop-up components together&lt;/span&gt;
  scPopupResult &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;|| &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    fromcablePopupResult &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot; - &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    tocablePopupResult &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot; ||| &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    afPopupResult &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot; - &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    zfPopupResult &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    TextFormatting&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NewLine &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;_____________________&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    TextFormatting&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NewLine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; scPopupResult&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;Although complicated schemas can pose some challenges in coming up with eloquent solutions for displaying information to your users, there are still low-code options to help you accomplish your task. Arcade, while limited, is still a powerful tool that can work through more complex schemas.&lt;/p&gt;
&lt;p&gt;The loops in this solution do slow down the creation of the pop-up a small amount, and with Arcade functionality increasing every year we may be able to enhance this solution in the future by reducing the amount of loops.&lt;/p&gt;
&lt;p&gt;These Esri Community posts also have some helpful tips if your needs are a bit different than ours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://community.esri.com/t5/developers-questions/arcade-if-statement-for-multiple-unique-values/m-p/589507#M3988&quot;&gt;Arcade If Statement for Multiple Unique Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://community.esri.com/t5/arcgis-online-questions/multiple-iif-statements-in-arcade-expression/td-p/485731&quot;&gt;Multiple IIF() Statements in Arcade Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Summarize Median Values in ArcGIS Pro via R-ArcGIS Bridge]]></title><description><![CDATA[If you‚Äôve ever longed for ‚Äòmedian‚Äô as an option in the dropdown list of Esri‚Äôs ‚ÄòSummarize Within‚Äô tool when working with non-normally‚Ä¶]]></description><link>https://merit-network.github.io/summarize_within_median_r_arcgis/</link><guid isPermaLink="false">https://merit-network.github.io/summarize_within_median_r_arcgis/</guid><pubDate>Fri, 29 Jan 2021 10:50:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;If you‚Äôve ever longed for ‚Äòmedian‚Äô as an option in the dropdown list of Esri‚Äôs ‚ÄòSummarize Within‚Äô tool when working with non-normally distributed data, long no more! Use this script and the R-ArcGIS Bridge to fulfill your non-parametric function needs.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;When your data is not normally distributed, look outside the limited dropdown options for a solution that maintains the integrity of your data. The R-ArcGIS Bridge provides the ability to use R in scripting a statistical model (in this case calculating the median value based on geographic location) and ArcGIS Pro to run and incorporate the script into your larger Esri workflow.&lt;/p&gt;
&lt;h1&gt;Why would I need something other than the options Esri provides?&lt;/h1&gt;
&lt;p&gt;Have you ever been working on a project in ArcGIS Pro, realized you had skewed data, and then further realized ArcGIS Pro‚Äôs ‚ÄòSummarize Within‚Äô tool limits you to a few options meant for normally distributed data? I certainly have. Rather than shrug your shoulders and think ‚Äòah well, the mean value is close enough‚Ä¶‚Äô see if you can find a way to use a more appropriate statistical test.&lt;/p&gt;
&lt;p&gt;To put this idea in some context, I‚Äôm working on a current project gathering granular internet speed test results and then aggregating those granular speed tests up to the census block level. When looking at the distribution of internet speeds within geographic buckets, you‚Äôll see that the distribution is highly skewed. A lot of the internet users may hang out around the 25 - 75 MBPS range for download speed, some may be at the 0 MBPS range, and then a smaller, but still substantial group, jump up to that 1G category, resulting in some major outliers, large tails, and large peaks.&lt;/p&gt;
&lt;p&gt;There is no question that this data does not satisfy the requirements of normally distributed data, meaning we should &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; use a parametric test (e.g. &lt;code class=&quot;language-text&quot;&gt;mean&lt;/code&gt;) to analyze the data. Using the &lt;code class=&quot;language-text&quot;&gt;mean&lt;/code&gt; function when aggregating these values up to the census block level would artificially push your average towards those outliers, misrepresenting what the ‚Äòaverage‚Äô person in that census block is really experiencing. When the purpose of this analysis is to provide data-driven insight into where new broadband infrastructure investments should be made, pushing the metric towards those high outliers is absolutely unacceptable. Fortunately, the median value of your data provides one option to better represent the true middle ground of what users on the ground are experiencing.&lt;/p&gt;
&lt;p&gt;This particular project has many components and is largely working in ArcGIS Pro‚Äôs model builder with some deeper statistics and figure generation happening in RStudio. Our goal is to have cohesion between these two programs, so we did not want a workflow that required us to run some analysis in ArcGIS Pro, leave this program and open up RStudio to run a custom-made script, and then go back into ArcGIS Pro to run the rest of the model. Luckily, Esri‚Äôs R-ArcGIS Bridge allows us to create the custom tool you‚Äôll see below and then import that into the ArcGIS Pro interface whenever we want to calculate the median download and upload speeds for each census block in our study area.&lt;/p&gt;
&lt;h1&gt;R-ArcGIS Bridge provides a solution&lt;/h1&gt;
&lt;p&gt;In this post I‚Äôm going to focus more on the actual script to calculate the median values, with some callouts to the R-ArcGIS Bridge components. To use this solution, you will need the following installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R and Rstudio 3.5 or later (&lt;a href=&quot;https://rstudio-education.github.io/hopr/starting.html&quot;&gt;https://rstudio-education.github.io/hopr/starting.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ArcGIS Pro 2.2 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you‚Äôre new to the concept of the R-ArcGIS Bridge, you can fnd more detail here: &lt;a href=&quot;https://github.com/R-ArcGIS/r-bridge-install&quot;&gt;https://github.com/R-ArcGIS/r-bridge-install&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Let‚Äôs break down the code&lt;/h1&gt;
&lt;p&gt;You‚Äôll need to first call the function that will allow you to bring this tool into ArcGIS Pro as a custom script that will prompt the user for input:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;tool_exec &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in_params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; out_params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#The rest of the code below goes in here&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We‚Äôll need the following R packages and code to initialize the R-ArcGIS bridge:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#classes and methods for spatial data, https://cran.r-project.org/web/packages/sp/index.html&lt;/span&gt;
require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;spatialEco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#needed for the point.in.polygon() function, https://cran.r-project.org/web/packages/spatialEco/index.html&lt;/span&gt;
require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arcgisbinding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#initializes the R-ArcGIS bridge and connects your Esri license info&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#tie your license into the session&lt;/span&gt;
arc.check_product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we define the input and output parameters you want the user to provide via the tool interface in ArcGIS Pro:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  polygon_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#in this case, the census blocks&lt;/span&gt;
  point_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#in this case, the points with the speed test data&lt;/span&gt;
  attribute_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this must be the EXACT name of the field in the data table&lt;/span&gt;
  attribute_groupby &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this must be the EXACT name of the field in the data table&lt;/span&gt;
  coord_system &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#user chooses Point or Polygon from dropdown for the coordinate system they want to use&lt;/span&gt;

  summarized_output &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; out_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this is user provided&lt;/span&gt;
  Output_FC &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; out_params &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this is derived&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, now we need to convert the user inputs to strings so that they will work properly in the rest of the script:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  polygon_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;polygon_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  attribute_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  attribute_groupby &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  summarized_output &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We‚Äôre now going to read in the GIS feature class, via &lt;code class=&quot;language-text&quot;&gt;arc.open()&lt;/code&gt;, and in the same line transform that into a data frame, via &lt;code class=&quot;language-text&quot;&gt;arc.select()&lt;/code&gt;, so we can work with it in R:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  poly.df &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arc.open&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;polygon_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point.df &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arc.open&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Polygon and point data have been converted to data frames&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we were just importing the feature class into RStudio to derive non-spatial statistics, we could stop at the data frame conversion. Since we will be perfoming spatial statistics, meaning that the actual location of the features is the prominent piece of the analysis (e.g. summarizing the median value of points residing inside a polygon vs answering the question ‚Äòwhat is the median value of all survey responses‚Äô) one more conversion is needed. We need to convert the data frames into a &lt;strong&gt;&lt;em&gt;SpatialPointsDataFrame&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;SpatialPolygonDataFrame&lt;/em&gt;&lt;/strong&gt; using the &lt;code class=&quot;language-text&quot;&gt;sp package&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  poly.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.data2sp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.df&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.data2sp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.df&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Data has been converted to spatial data frames&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we can do any analysis between these two spatial data frames we need to ensure their projections match. At the top we have the user choose if they want the resulting feature class to be of the coordinate system of the point or polygon feature class. We‚Äôre assuming at least one of these feature classes has the desired coordinate system for output.&lt;/p&gt;
&lt;p&gt;For reference, the &lt;code class=&quot;language-text&quot;&gt;spTransform()&lt;/code&gt; function performs the actual projection and datum transformation and the &lt;code class=&quot;language-text&quot;&gt;CRS()&lt;/code&gt; function grabs the projection info of the input feature class as a class &lt;strong&gt;&lt;em&gt;character&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#grab projection information of each spatial data frame as a string&lt;/span&gt;
  point_proj &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; proj4string&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  poly_proj &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; proj4string&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#check if the coordinate systems match, if they don&apos;t then reproject one based on user input&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_proj&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;poly_proj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coord_system&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Point&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      poly.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; spTransform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CRS&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_proj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      point.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; spTransform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CRS&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Coordinate systems have been checked and updated if necessary&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can finally get to the exciting part and do some stats! We‚Äôre going to attach a polygon ID to each point and then aggregate the median value of each point with the same polygon ID.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#attach polygon attributes to each point, allowing for aggregation of a point numeric value by a polygon ID&lt;/span&gt;
  pts.poly &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; point.&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;.poly&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;token comment&quot;&gt;#summarize points based on polygon ID via user input and update column names&lt;/span&gt;
  summarized_median &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FUN&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;median&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; drop&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_median&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Median&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Median values aggregated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also will want the total number of points in each census block for a more robust understanding of our median metric:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#count total amount of points within each polygon based on ID supplied by user&lt;/span&gt;
  summarized_count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FUN&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; drop&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Total Point Count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Total count aggregated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish, we need to merge these outputs together and write the data to an Esri feature class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#merge median and count together into one table&lt;/span&gt;
  summarized_merged &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; merge&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_median&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; summarized_count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#join table back to SpatialPolygonsDataFrame&lt;/span&gt;
  new_poly_spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; merge&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; summarized_merged&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#export to feature class&lt;/span&gt;
  Output_FC &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; new_poly_spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That‚Äôs all the code! If you want to test this in RStudio before bringing it into ArcGIS Pro, simply comment out the initial function definition and parameter definitions, define the parameters as variables with the same name as the parameter definition, and run the code from there.&lt;/p&gt;
&lt;p&gt;For more information on creating a custom tool from your script in ArcGIS Pro, visit this site: &lt;a href=&quot;https://pro.arcgis.com/en/pro-app/latest/arcpy/geoprocessing_and_python/adding-a-script-tool.htm&quot;&gt;https://pro.arcgis.com/en/pro-app/latest/arcpy/geoprocessing_and_python/adding-a-script-tool.htm&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;At the end of the day it is so important to stay true to your data, even if that means stepping outside of the preconfigured dropdowns your software provides. Some of the time your data may be normally distributed and you can use ArcGIS Pro‚Äôs ‚ÄòSummarize Within‚Äô with no issues. In the cases where your data is non-parametric, doing a bit of extra work to seek out a non-parametic solution will maintain the integrity of your data and the R-ArcGIS Bridge makes this so much more doable.&lt;/p&gt;
&lt;p&gt;It is also worth noting that there are other way to deal with non-normally distributed data, such as removing outliers or transforming your data, that may work better for your specific project. The most important rule of thumb is to always use your brain first about what works best for the intended use of that data.&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Fail Gracefully]]></title><description><![CDATA[Fail Gracefully! Empower your users by providing them with applications that fail gracefully, or indicate clean error messaging without‚Ä¶]]></description><link>https://merit-network.github.io/how-to-fail-gracefully/</link><guid isPermaLink="false">https://merit-network.github.io/how-to-fail-gracefully/</guid><pubDate>Tue, 05 Jan 2021 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fail Gracefully!&lt;/strong&gt; Empower your users by providing them with applications that fail gracefully, or indicate clean error messaging without stopping them from getting the job done.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;If fail you must, then provide an accurate error message on the User Interface to guide users to resolve the issues.&lt;/p&gt;
&lt;h1&gt;What the heck does it mean?&lt;/h1&gt;
&lt;p&gt;‚ÄúWe are unable to perform this operation. We are sorry for the inconvenience, please check back later.‚Äù When throwing your computer out the window is not an option, what else can you do? Nothing.&lt;/p&gt;
&lt;p&gt;Most of the time we move on, just work through the thing, and try it a different way. Maybe an incognito window, maybe clear our cache, maybe restarting our computer? Not everybody has an automated way to debug an issue. If they did, then software companies everywhere would cease to exist.&lt;/p&gt;
&lt;h1&gt;Support the User&lt;/h1&gt;
&lt;p&gt;As Tech Support (yes, we are support, we create, we manage, we develop, we guide, but we support), we need to put ourselves back into the shoes of the User. We cannot always assume that the User is doing it wrong, because we build the applications for the User. The error checking in the code knows enough to display an error. At the very least, if the User is ‚Äòdoing it wrong‚Äô, then the error that we throw out should be smart enough to tell the User what happened. It is okay to be transparent- it fixes issues quicker, and builds trust with the user.&lt;/p&gt;
&lt;p&gt;What if instead of throwing a catch-all error and saying ‚Äòopen a ticket with support‚Äô, we take the time to &lt;strong&gt;at least&lt;/strong&gt; show the user what &lt;strong&gt;could&lt;/strong&gt; be wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúPlease enter value(s) for: Rejection Reason.‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúThere appears to be duplicated information for this Contact.‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúYour totals do not balance, please review.‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Let the User Decide&lt;/h1&gt;
&lt;p&gt;Instead of blocking the User from doing any work at all, consider warning the User and then logging the issue in an audit trail. Allow the User to save, because it might be something that will not negatively impact a background process that is running, or harm a future record that has not even been created yet. Do not assume that the User should not do a specific thing just because they do not know that they need it (yet).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give them Options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúNot all fields have been completed, do you wish to continue?‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúAre you sure you want to abandon these changes?‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Giving users the option to move forward, save their changes, or cancel gives them the control that they need to be able to work. If users become frustrated using an application for data entry, they are more likely to abandon its use entirely and find an alternative, less-secure solution elsewhere on their own.&lt;/p&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;Talk to your Users. Find out what is important about their data entry application. Find out what types of data they would actually like to have validated. Ask them what they need to know when you alert them through the User Interface of an error. How should your code handle it? How do they want to work through it? Transparency in this will save you time, and also gain a positive relationship of trust with your users.&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Setting Django model fields automatically using Oracle Database sequences]]></title><description><![CDATA[Oracle Database not required! The following will detail working with things like sequences in Oracle database but the decorator and general‚Ä¶]]></description><link>https://merit-network.github.io/django-model-fields-oracle-database-sequences/</link><guid isPermaLink="false">https://merit-network.github.io/django-model-fields-oracle-database-sequences/</guid><pubDate>Wed, 11 Nov 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Oracle Database not required!&lt;/strong&gt; The following will detail working with things like sequences in Oracle database but the decorator and general approach can be used in any database supported by Django.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Use the &lt;code class=&quot;language-text&quot;&gt;set_sql_for_field&lt;/code&gt; decorator below on your model‚Äôs &lt;code class=&quot;language-text&quot;&gt;save()&lt;/code&gt; method to get/set a sequence or any other arbitrary SQL.&lt;/p&gt;
&lt;h1&gt;An imperfect database for an imperfect world&lt;/h1&gt;
&lt;p&gt;Sometimes when working with existing or legacy databases you might run into less-than-perfect implementations of things like primary keys.&lt;/p&gt;
&lt;p&gt;Could be that when the database was created the database management system (DBMS) didn‚Äôt support things like &lt;code class=&quot;language-text&quot;&gt;AUTO_INCREMENT&lt;/code&gt; (MySQL) or &lt;code class=&quot;language-text&quot;&gt;IDENTITY&lt;/code&gt; (Oracle Database 12+). It could also be that those responsible had good reason to manually manage things or maybe didn‚Äôt know of a different way of doing things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let‚Äôs say for reasons beyond this blog post that you cannot alter the existing databases/tables.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Generating Django models&lt;/h1&gt;
&lt;p&gt;We‚Äôll assume you‚Äôve got your &lt;code class=&quot;language-text&quot;&gt;DATABASES&lt;/code&gt; setup correctly in Django‚Äôs settings and want to generate a model for the following Oracle Database table:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- example from: https://oracle-base.com/articles/misc/autonumber-and-identity&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; department &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  DEPARTMENT_ID NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  DESCRIPTION   VARCHAR2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; department &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; dept_pk &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; SEQUENCE dept_seq&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To generate the Django model for this table:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;python manage.py inspectdb department &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; department/models.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should have a model that looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    department_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;department&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We‚Äôve got the necessary model code but we can‚Äôt save our model without errors! We need to get the next sequence and use it as the &lt;code class=&quot;language-text&quot;&gt;DEPARTMENT_ID&lt;/code&gt; when creating a new department.&lt;/p&gt;
&lt;h1&gt;Adding our Django model method decorator&lt;/h1&gt;
&lt;p&gt;Create/edit &lt;code class=&quot;language-text&quot;&gt;models.py&lt;/code&gt; in the root of your project/app and add:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; functools

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;
    Decorator for Model.save() to set SQL for field if empty.

    Example:

    class LegacyModel(models.Model):
        col1 = models.IntegerField(primary_key=True)
        col2 = models.IntegerField()

        @set_sql_for_field(&apos;col1&apos;, &apos;select col1_seq.nextval from dual&apos;)
        @set_sql_for_field(&apos;col2&apos;, &apos;select 1+max(col2) from legacy_model&apos;)
        def save(self, *args, **kwargs):
            super().save(*args, **kwargs)

    When this model is saved col1 and col2 will be set (if empty) to the output
    of the provided SQL within the schema/database of the model&apos;s app.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model_save_func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@functools&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wraps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model_save_func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&apos;set_sql_for_field was given a field that does not exist on &apos;&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&apos;the model. Double-check model fields and decorators for &apos;&lt;/span&gt;
                &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__class__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; and SQL &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;# Multi-DB safe! Get DB for class from default manager.&lt;/span&gt;
                database &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__class__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_default_manager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db

                &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; connections
                &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; connections&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;database&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cursor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; cursor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    cursor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token builtin&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cursor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchone&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; model_save_func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update the departments model to use our new decorator:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; set_sql_for_field

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    department_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;department&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;department_id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;select dept_seq.nextval from dual&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;That‚Äôs it!&lt;/strong&gt; Whenever we save our model the field &lt;code class=&quot;language-text&quot;&gt;department_id&lt;/code&gt; will be set using the next sequence from the database and it even works if we have multiple databases in our Django settings.&lt;/p&gt;
&lt;h1&gt;What about triggers?&lt;/h1&gt;
&lt;p&gt;It‚Äôs possible there is already a trigger on the table that will get/set the sequence when &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- example from: https://oracle-base.com/articles/misc/autonumber-and-identity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TRIGGER&lt;/span&gt; dept_bir
BEFORE &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; department
&lt;span class=&quot;token keyword&quot;&gt;FOR EACH ROW&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;department_id &lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  :new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;department_id :&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept_seq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NEXTVAL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That‚Äôs awesome but it can also lead to some weird issues/errors in Django (e.g., admin showing ‚ÄúNone‚Äù when saving). If the trigger is setup to check NULL no harm in setting it ourselves but you should always check triggers for any tables when setting up new models in Django.&lt;/p&gt;
&lt;h1&gt;Advanced model method decorator usage&lt;/h1&gt;
&lt;p&gt;Let‚Äôs say you have a table without a primary key and without &lt;code class=&quot;language-text&quot;&gt;sequence&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;identity&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;auto_increment&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; dept_type &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TYPE_KEY NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DESCR VARCHAR2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You look at some of the code using it and see that the &lt;code class=&quot;language-text&quot;&gt;TYPE_KEY&lt;/code&gt; was being set using this SQL:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; dept_type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;inspectdb&lt;/code&gt; like we did above and add our new decorator to get the final model:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; set_sql_for_field

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    type_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    descr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dept_type&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;select 1+max(type_key) from dept_type&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That‚Äôs all there is to it. We set &lt;code class=&quot;language-text&quot;&gt;primary_key&lt;/code&gt; on the &lt;code class=&quot;language-text&quot;&gt;type_key&lt;/code&gt; field to tell Django not to use the automatic &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; field (see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/topics/db/models/#automatic-primary-key-fields&quot;&gt;https://docs.djangoproject.com/en/3.1/topics/db/models/#automatic-primary-key-fields&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;Additional model/field considerations&lt;/h1&gt;
&lt;p&gt;Depending on your models you may want to set certain fields as read-only in the Django admin or Django REST Framework to avoid them being set directly:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/admin.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DepartmentType

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DepartmentType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentTypeAdmin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModelAdmin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    list_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__str__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    readonly_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    search_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;=type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;descr&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;# departments/serializers.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; rest_framework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serializers &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ModelSerializer
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DepartmentType

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentTypeSerializer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ModelSerializer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__all__&apos;&lt;/span&gt;
        model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DepartmentType
        read_only_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;When starting fresh try to follow best practices for your DBMS and lean on the default mechanisms your DBMS provides for working with primary keys and IDs.&lt;/p&gt;
&lt;p&gt;In Oracle Database, that might be using &lt;code class=&quot;language-text&quot;&gt;IDENTITY&lt;/code&gt; which uses sequences under the hood but has additional features like one-per-table and sane defaults (more at &lt;a href=&quot;https://oracle-base.com/articles/12c/identity-columns-in-oracle-12cr1&quot;&gt;https://oracle-base.com/articles/12c/identity-columns-in-oracle-12cr1&lt;/a&gt;). In other systems that might be &lt;code class=&quot;language-text&quot;&gt;AUTO_INCREMENT&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;AUTOINCREMENT&lt;/code&gt; or something comparable.&lt;/p&gt;
&lt;p&gt;There are absolutely times you may need to abandon auto-incrementing primary keys but if you get to that point you don‚Äôt need us telling you how you should do things!&lt;/p&gt;
&lt;p&gt;For the times you can‚Äôt start fresh or have had to get a bit more creative hopefully something like &lt;code class=&quot;language-text&quot;&gt;set_sql_for_field&lt;/code&gt; can help!&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Welcome to our first post on our open source and technology site! üéâ This post isn‚Äôt much to look at, but for us it‚Äôs a big step towards‚Ä¶]]></description><link>https://merit-network.github.io/hello-world/</link><guid isPermaLink="false">https://merit-network.github.io/hello-world/</guid><pubDate>Fri, 16 Oct 2020 14:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Welcome to our first post on our open source and technology site! üéâ&lt;/h1&gt;
&lt;p&gt;This post isn‚Äôt much to look at, but for us it‚Äôs a big step towards giving back to the community. We‚Äôre huge fans of open source and want to be sure we‚Äôre contributing whenever we can.&lt;/p&gt;
&lt;p&gt;As this site grows we hope to share what we know/learn working with things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/elastic-stack&quot;&gt;Elastic Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mojolicious.org/&quot;&gt;Mojolicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netsuite.com/&quot;&gt;NetSuite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.radb.net/&quot;&gt;Routing Assets Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zenoss.com/&quot;&gt;Zenoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;‚Ä¶and more!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This entire site is open source&lt;/h1&gt;
&lt;p&gt;As a start, &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io&quot;&gt;this entire site is open source&lt;/a&gt; and MIT-licensed! It was built using &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;gatsby-starter-blog&lt;/a&gt; along with &lt;a href=&quot;https://bulma.io/&quot;&gt;Bulma&lt;/a&gt; and &lt;a href=&quot;https://fontawesome.com/&quot;&gt;Font Awesome&lt;/a&gt; and uses GitHub Actions for automatic builds and GitHub Pages for hosting.&lt;/p&gt;
&lt;p&gt;If you find something we should change or would like to contribute please &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;open an issue&lt;/a&gt; or &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/pulls&quot;&gt;submit a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have questions about contributing please check out &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Stay tuned!&lt;/h1&gt;
&lt;p&gt;For the folks that use RSS we have an &lt;a href=&quot;/rss.xml&quot;&gt;RSS feed for this site&lt;/a&gt; and for everyone else‚Ä¶check back soon?&lt;/p&gt;
&lt;p&gt;We‚Äôve got several ideas for posts and we‚Äôre committed to getting them out as soon as we can.&lt;/p&gt;</content:encoded></item></channel></rss>